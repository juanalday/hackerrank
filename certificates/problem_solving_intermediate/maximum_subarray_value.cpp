#include <gtest/gtest.h>

#include <algorithm>
#include <vector>
#include <numeric>

namespace {

	long long maxSubarrayValue(std::vector<int> arr) {

		// The trick here is in one sentence in the exercise: 
		// "When selecting a subarray, the ordering of the elements restarts at zero 
		// regardless of the initial position of the elements within the original array.
		// That is why originally that example didn't made sense:
		// For an array [−1, −4, 2], subarray [−4, 2] has the value (−4−2)^2 = (−6)^2 = 36.
		// So they pick a subarray that starts at an odd index, but the new subarray makes '4' becomes index 0 (even)

		// Otherwise I could just split the vector in two, use std::partial_sum, and then the loop would be much easier
		// but in this case, I have to account for a mini-rolling window of odd-to-even or even-to-odd

		auto n = arr.size();
		std::vector<long long> evenSum(n + 1, 0);
		std::vector<long long> oddSum(n + 1, 0);

		for (int i = 0; i < arr.size(); ++i) {
			evenSum[i + 1] = evenSum[i];
			oddSum[i + 1] = oddSum[i];
			auto c = arr[i];
			if (i % 2 == 0) {
				evenSum[i + 1] += c;
			}
			else {
				oddSum[i + 1] += c;
			}
		}

		long long maxVal = 0;

		for (int i = 0; i < n; ++i) {
			for (int j = i + 1; j <= n; ++j) {
				long long even = evenSum[j] - evenSum[i];
				long long odd = oddSum[j] - oddSum[i];
				long long diff = even - odd;
				maxVal = std::max(maxVal, diff * diff);
			}
		}

		return maxVal;

	}
}

TEST(maxSubarrayValue, DISABLED_example0) 
{
	EXPECT_EQ(36, maxSubarrayValue({2, -1, -4, 5}));
}

TEST(maxSubarrayValue, DISABLED_example1)
{
	EXPECT_EQ(36, maxSubarrayValue({ -1, -4, 2 }));
}

TEST(maxSubarrayValue, DISABLED_sample0)
{
	EXPECT_EQ(25, maxSubarrayValue({ 1, -1, 1, -1, 1 }));
}

TEST(maxSubarrayValue, DISABLED_sample1)
{
	EXPECT_EQ(81, maxSubarrayValue({ -1, 2, 3, 4, -5 }));
}

TEST(maxSubarrayValue, DISABLED_case0)
{
	EXPECT_EQ(25, maxSubarrayValue({ 1, -1, 1, -1, 1 }));
}

TEST(maxSubarrayValue, DISABLED_case1)
{
	EXPECT_EQ(81, maxSubarrayValue({ -1, 2, 3, 4, -5 }));
}

TEST(maxSubarrayValue, DISABLED_case2)
{
	EXPECT_EQ(81, maxSubarrayValue({ 4, -1, -1, -1, 5, 1 }));
}

TEST(maxSubarrayValue, DISABLED_case3)
{
	EXPECT_EQ(361, maxSubarrayValue({ -6, 10, -1, 2, 10, -1 }));
}

TEST(maxSubarrayValue, DISABLED_case4)
{
	EXPECT_EQ(361, maxSubarrayValue({ -7, 5, -1, -4, -10, -8, 10 }));
}

TEST(maxSubarrayValue, DISABLED_case5)
{
	EXPECT_EQ(45158400, maxSubarrayValue({ 763, 77, 449, 310, 787, -656, -204, -709, -270, 76, -267, 184, 170, -985, 33, -822, 666, 418, 26, -247, 898, -104, 85, -146, 980, 631, 359, 908, -560, -744, -764, 836, -103, -531, -116, 316, 681, -148, 226, 206, -439, -961, -792, 598, -629, -705, -479, -494, -169, 608, -921, 348, 729, -100, -970, 742, 131, -766, 522, 987, 968, -650, -929, -119, 810, -562, -229, -792, 362, -738, 565, 643, -131, 285, -33, 964 }));
}
TEST(maxSubarrayValue, DISABLED_case6)
{
	EXPECT_EQ(21150801, maxSubarrayValue({ 765, 910, -240, 338, -689, 892, -518, 663, 447, 796, 716, -830, -465, 835, 426, 88, -49, -810, -159, 326, -345, -925, 97, -371, 496, 921, 693, 526, 785, -218, -939, 119, 935, -994, 510, 716, 513, -18, -202, 943 }));
}

TEST(maxSubarrayValue, DISABLED_case7)
{
	EXPECT_EQ(189695529, maxSubarrayValue({ 654, -940, 629, 592, 529, 618, 403, -497, -538, -996, 496, -499, 80, 768, 714, -346, -477, 883, -527, -116, -362, -462, 389, 818, -470, -124, -523, 650, -651, -58, -854, -85, 947, 974, -789, 651, -369, -88, 154, -660, -412, -516, -395, -424, -80, 743, -603, 371, 153, 393, 450, 276, -209, -25, -704, 673, -926, 621, -636, 787, -214, -84, -584, 551, 427, 759, 355, -120, 675, -690, 176, 244, 205, 471, 434, 667, 511, 723, 628, -846, -896, 560, -661, -252, -53, -432, -8, -792, 681, 496, 914, -208, -420, -331 }));
}

TEST(maxSubarrayValue, DISABLED_case8)
{
	EXPECT_EQ(25, maxSubarrayValue({ -5, -3 }));
}

TEST(maxSubarrayValue, DISABLED_)
{
	std::vector<int> const input = {};
	EXPECT_EQ(1000000000000, maxSubarrayValue(input));
}
