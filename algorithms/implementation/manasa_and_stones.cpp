#include "gtest/gtest.h"

#include <algorithm>
#include <vector>
#include <map>
std::vector<int> stones(int n, int a, int b) {

	if(a == b)
		return { (n-1)*a };

	std::vector<int> results;

	if (n == 2)
		++n;
	for (int i = 0; i < n; i++) {
		int value = a * (n - 1 - i) + b * i;
		results.push_back(value);
	}
	std::sort(results.begin(), results.end());
	return results;

}

TEST(stones, example)
{
	EXPECT_EQ(std::vector<int>({ 4, 5, 6 }), stones(2, 2, 3));
}

TEST(stones, sample)
{
	EXPECT_EQ(std::vector<int>({ 2, 3, 4 }), stones(3, 1, 2));
	EXPECT_EQ(std::vector<int>({ 30, 120, 210, 300 }), stones(4, 10, 100));
}

TEST(stones, case_0)
{
	EXPECT_EQ(std::vector<int>({ 2, 3, 4 }), stones(3, 1, 2));
	EXPECT_EQ(std::vector<int>({ 30, 120, 210, 300 }), stones(4, 10, 100));
}

TEST(stones, case_1)
{
	EXPECT_EQ(std::vector<int>({ 54, 56, 58, 60, 62, 64, 66 }), stones(7, 9, 11));
	EXPECT_EQ(std::vector<int>({ 24, 32, 40, 48 }), stones(4, 8, 16));
}

TEST(stones, case_3)
{
	EXPECT_EQ(stones(58, 69, 24), std::vector<int>({ 1368, 1413, 1458, 1503, 1548, 1593, 1638, 1683, 1728, 1773, 1818, 1863, 1908, 1953, 1998, 2043, 2088, 2133, 2178, 2223, 2268, 2313, 2358, 2403, 2448, 2493, 2538, 2583, 2628, 2673, 2718, 2763, 2808, 2853, 2898, 2943, 2988, 3033, 3078, 3123, 3168, 3213, 3258, 3303, 3348, 3393, 3438, 3483, 3528, 3573, 3618, 3663, 3708, 3753, 3798, 3843, 3888, 3933 }));
	EXPECT_EQ(stones(83, 86, 81), std::vector<int>({ 6642, 6647, 6652, 6657, 6662, 6667, 6672, 6677, 6682, 6687, 6692, 6697, 6702, 6707, 6712, 6717, 6722, 6727, 6732, 6737, 6742, 6747, 6752, 6757, 6762, 6767, 6772, 6777, 6782, 6787, 6792, 6797, 6802, 6807, 6812, 6817, 6822, 6827, 6832, 6837, 6842, 6847, 6852, 6857, 6862, 6867, 6872, 6877, 6882, 6887, 6892, 6897, 6902, 6907, 6912, 6917, 6922, 6927, 6932, 6937, 6942, 6947, 6952, 6957, 6962, 6967, 6972, 6977, 6982, 6987, 6992, 6997, 7002, 7007, 7012, 7017, 7022, 7027, 7032, 7037, 7042, 7047, 7052 }));
	EXPECT_EQ(stones(73, 25, 25), std::vector<int>({ 1800 }));
	EXPECT_EQ(stones(12, 73, 82), std::vector<int>({ 803, 812, 821, 830, 839, 848, 857, 866, 875, 884, 893, 902 }));
	EXPECT_EQ(stones(5, 3, 23),   std::vector<int>({ 12, 32, 52, 72, 92 }));


}
TEST(stones, case_10)
{
	EXPECT_EQ(stones(406, 279, 669), std::vector<int>({ 112995 ,113385 ,113775 ,114165 ,114555 ,114945 ,115335 ,115725 ,116115 ,116505 ,116895 ,117285 ,117675 ,118065 ,118455 ,118845 ,119235 ,119625 ,120015 ,120405 ,120795 ,121185 ,121575 ,121965 ,122355 ,122745 ,123135 ,123525 ,123915 ,124305 ,124695 ,125085 ,125475 ,125865 ,126255 ,126645 ,127035 ,127425 ,127815 ,128205 ,128595 ,128985 ,129375 ,129765 ,130155 ,130545 ,130935 ,131325 ,131715 ,132105 ,132495 ,132885 ,133275 ,133665 ,134055 ,134445 ,134835 ,135225 ,135615 ,136005 ,136395 ,136785 ,137175 ,137565 ,137955 ,138345 ,138735 ,139125 ,139515 ,139905 ,140295 ,140685 ,141075 ,141465 ,141855 ,142245 ,142635 ,143025 ,143415 ,143805 ,144195 ,144585 ,144975 ,145365 ,145755 ,146145 ,146535 ,146925 ,147315 ,147705 ,148095 ,148485 ,148875 ,149265 ,149655 ,150045 ,150435 ,150825 ,151215 ,151605 ,151995 ,152385 ,152775 ,153165 ,153555 ,153945 ,154335 ,154725 ,155115 ,155505 ,155895 ,156285 ,156675 ,157065 ,157455 ,157845 ,158235 ,158625 ,159015 ,159405 ,159795 ,160185 ,160575 ,160965 ,161355 ,161745 ,162135 ,162525 ,162915 ,163305 ,163695 ,164085 ,164475 ,164865 ,165255 ,165645 ,166035 ,166425 ,166815 ,167205 ,167595 ,167985 ,168375 ,168765 ,169155 ,169545 ,169935 ,170325 ,170715 ,171105 ,171495 ,171885 ,172275 ,172665 ,173055 ,173445 ,173835 ,174225 ,174615 ,175005 ,175395 ,175785 ,176175 ,176565 ,176955 ,177345 ,177735 ,178125 ,178515 ,178905 ,179295 ,179685 ,180075 ,180465 ,180855 ,181245 ,181635 ,182025 ,182415 ,182805 ,183195 ,183585 ,183975 ,184365 ,184755 ,185145 ,185535 ,185925 ,186315 ,186705 ,187095 ,187485 ,187875 ,188265 ,188655 ,189045 ,189435 ,189825 ,190215 ,190605 ,190995 ,191385 ,191775 ,192165 ,192555 ,192945 ,193335 ,193725 ,194115 ,194505 ,194895 ,195285 ,195675 ,196065 ,196455 ,196845 ,197235 ,197625 ,198015 ,198405 ,198795 ,199185 ,199575 ,199965 ,200355 ,200745 ,201135 ,201525 ,201915 ,202305 ,202695 ,203085 ,203475 ,203865 ,204255 ,204645 ,205035 ,205425 ,205815 ,206205 ,206595 ,206985 ,207375 ,207765 ,208155 ,208545 ,208935 ,209325 ,209715 ,210105 ,210495 ,210885 ,211275 ,211665 ,212055 ,212445 ,212835 ,213225 ,213615 ,214005 ,214395 ,214785 ,215175 ,215565 ,215955 ,216345 ,216735 ,217125 ,217515 ,217905 ,218295 ,218685 ,219075 ,219465 ,219855 ,220245 ,220635 ,221025 ,221415 ,221805 ,222195 ,222585 ,222975 ,223365 ,223755 ,224145 ,224535 ,224925 ,225315 ,225705 ,226095 ,226485 ,226875 ,227265 ,227655 ,228045 ,228435 ,228825 ,229215 ,229605 ,229995 ,230385 ,230775 ,231165 ,231555 ,231945 ,232335 ,232725 ,233115 ,233505 ,233895 ,234285 ,234675 ,235065 ,235455 ,235845 ,236235 ,236625 ,237015 ,237405 ,237795 ,238185 ,238575 ,238965 ,239355 ,239745 ,240135 ,240525 ,240915 ,241305 ,241695 ,242085 ,242475 ,242865 ,243255 ,243645 ,244035 ,244425 ,244815 ,245205 ,245595 ,245985 ,246375 ,246765 ,247155 ,247545 ,247935 ,248325 ,248715 ,249105 ,249495 ,249885 ,250275 ,250665 ,251055 ,251445 ,251835 ,252225 ,252615 ,253005 ,253395 ,253785 ,254175 ,254565 ,254955 ,255345 ,255735 ,256125 ,256515 ,256905 ,257295 ,257685 ,258075 ,258465 ,258855 ,259245 ,259635 ,260025 ,260415 ,260805 ,261195 ,261585 ,261975 ,262365 ,262755 ,263145 ,263535 ,263925 ,264315 ,264705 ,265095 ,265485 ,265875 ,266265 ,266655 ,267045 ,267435 ,267825 ,268215 ,268605 ,268995 ,269385 ,269775 ,270165 ,270555 ,270945 }));
	EXPECT_EQ(stones(142, 895, 716), std::vector<int>({ 100956 ,101135 ,101314 ,101493 ,101672 ,101851 ,102030 ,102209 ,102388 ,102567 ,102746 ,102925 ,103104 ,103283 ,103462 ,103641 ,103820 ,103999 ,104178 ,104357 ,104536 ,104715 ,104894 ,105073 ,105252 ,105431 ,105610 ,105789 ,105968 ,106147 ,106326 ,106505 ,106684 ,106863 ,107042 ,107221 ,107400 ,107579 ,107758 ,107937 ,108116 ,108295 ,108474 ,108653 ,108832 ,109011 ,109190 ,109369 ,109548 ,109727 ,109906 ,110085 ,110264 ,110443 ,110622 ,110801 ,110980 ,111159 ,111338 ,111517 ,111696 ,111875 ,112054 ,112233 ,112412 ,112591 ,112770 ,112949 ,113128 ,113307 ,113486 ,113665 ,113844 ,114023 ,114202 ,114381 ,114560 ,114739 ,114918 ,115097 ,115276 ,115455 ,115634 ,115813 ,115992 ,116171 ,116350 ,116529 ,116708 ,116887 ,117066 ,117245 ,117424 ,117603 ,117782 ,117961 ,118140 ,118319 ,118498 ,118677 ,118856 ,119035 ,119214 ,119393 ,119572 ,119751 ,119930 ,120109 ,120288 ,120467 ,120646 ,120825 ,121004 ,121183 ,121362 ,121541 ,121720 ,121899 ,122078 ,122257 ,122436 ,122615 ,122794 ,122973 ,123152 ,123331 ,123510 ,123689 ,123868 ,124047 ,124226 ,124405 ,124584 ,124763 ,124942 ,125121 ,125300 ,125479 ,125658 ,125837 ,126016 ,126195 }));
	EXPECT_EQ(stones(996, 864, 484), std::vector<int>({ 481580 ,481960 ,482340 ,482720 ,483100 ,483480 ,483860 ,484240 ,484620 ,485000 ,485380 ,485760 ,486140 ,486520 ,486900 ,487280 ,487660 ,488040 ,488420 ,488800 ,489180 ,489560 ,489940 ,490320 ,490700 ,491080 ,491460 ,491840 ,492220 ,492600 ,492980 ,493360 ,493740 ,494120 ,494500 ,494880 ,495260 ,495640 ,496020 ,496400 ,496780 ,497160 ,497540 ,497920 ,498300 ,498680 ,499060 ,499440 ,499820 ,500200 ,500580 ,500960 ,501340 ,501720 ,502100 ,502480 ,502860 ,503240 ,503620 ,504000 ,504380 ,504760 ,505140 ,505520 ,505900 ,506280 ,506660 ,507040 ,507420 ,507800 ,508180 ,508560 ,508940 ,509320 ,509700 ,510080 ,510460 ,510840 ,511220 ,511600 ,511980 ,512360 ,512740 ,513120 ,513500 ,513880 ,514260 ,514640 ,515020 ,515400 ,515780 ,516160 ,516540 ,516920 ,517300 ,517680 ,518060 ,518440 ,518820 ,519200 ,519580 ,519960 ,520340 ,520720 ,521100 ,521480 ,521860 ,522240 ,522620 ,523000 ,523380 ,523760 ,524140 ,524520 ,524900 ,525280 ,525660 ,526040 ,526420 ,526800 ,527180 ,527560 ,527940 ,528320 ,528700 ,529080 ,529460 ,529840 ,530220 ,530600 ,530980 ,531360 ,531740 ,532120 ,532500 ,532880 ,533260 ,533640 ,534020 ,534400 ,534780 ,535160 ,535540 ,535920 ,536300 ,536680 ,537060 ,537440 ,537820 ,538200 ,538580 ,538960 ,539340 ,539720 ,540100 ,540480 ,540860 ,541240 ,541620 ,542000 ,542380 ,542760 ,543140 ,543520 ,543900 ,544280 ,544660 ,545040 ,545420 ,545800 ,546180 ,546560 ,546940 ,547320 ,547700 ,548080 ,548460 ,548840 ,549220 ,549600 ,549980 ,550360 ,550740 ,551120 ,551500 ,551880 ,552260 ,552640 ,553020 ,553400 ,553780 ,554160 ,554540 ,554920 ,555300 ,555680 ,556060 ,556440 ,556820 ,557200 ,557580 ,557960 ,558340 ,558720 ,559100 ,559480 ,559860 ,560240 ,560620 ,561000 ,561380 ,561760 ,562140 ,562520 ,562900 ,563280 ,563660 ,564040 ,564420 ,564800 ,565180 ,565560 ,565940 ,566320 ,566700 ,567080 ,567460 ,567840 ,568220 ,568600 ,568980 ,569360 ,569740 ,570120 ,570500 ,570880 ,571260 ,571640 ,572020 ,572400 ,572780 ,573160 ,573540 ,573920 ,574300 ,574680 ,575060 ,575440 ,575820 ,576200 ,576580 ,576960 ,577340 ,577720 ,578100 ,578480 ,578860 ,579240 ,579620 ,580000 ,580380 ,580760 ,581140 ,581520 ,581900 ,582280 ,582660 ,583040 ,583420 ,583800 ,584180 ,584560 ,584940 ,585320 ,585700 ,586080 ,586460 ,586840 ,587220 ,587600 ,587980 ,588360 ,588740 ,589120 ,589500 ,589880 ,590260 ,590640 ,591020 ,591400 ,591780 ,592160 ,592540 ,592920 ,593300 ,593680 ,594060 ,594440 ,594820 ,595200 ,595580 ,595960 ,596340 ,596720 ,597100 ,597480 ,597860 ,598240 ,598620 ,599000 ,599380 ,599760 ,600140 ,600520 ,600900 ,601280 ,601660 ,602040 ,602420 ,602800 ,603180 ,603560 ,603940 ,604320 ,604700 ,605080 ,605460 ,605840 ,606220 ,606600 ,606980 ,607360 ,607740 ,608120 ,608500 ,608880 ,609260 ,609640 ,610020 ,610400 ,610780 ,611160 ,611540 ,611920 ,612300 ,612680 ,613060 ,613440 ,613820 ,614200 ,614580 ,614960 ,615340 ,615720 ,616100 ,616480 ,616860 ,617240 ,617620 ,618000 ,618380 ,618760 ,619140 ,619520 ,619900 ,620280 ,620660 ,621040 ,621420 ,621800 ,622180 ,622560 ,622940 ,623320 ,623700 ,624080 ,624460 ,624840 ,625220 ,625600 ,625980 ,626360 ,626740 ,627120 ,627500 ,627880 ,628260 ,628640 ,629020 ,629400 ,629780 ,630160 ,630540 ,630920 ,631300 ,631680 ,632060 ,632440 ,632820 ,633200 ,633580 ,633960 ,634340 ,634720 ,635100 ,635480 ,635860 ,636240 ,636620 ,637000 ,637380 ,637760 ,638140 ,638520 ,638900 ,639280 ,639660 ,640040 ,640420 ,640800 ,641180 ,641560 ,641940 ,642320 ,642700 ,643080 ,643460 ,643840 ,644220 ,644600 ,644980 ,645360 ,645740 ,646120 ,646500 ,646880 ,647260 ,647640 ,648020 ,648400 ,648780 ,649160 ,649540 ,649920 ,650300 ,650680 ,651060 ,651440 ,651820 ,652200 ,652580 ,652960 ,653340 ,653720 ,654100 ,654480 ,654860 ,655240 ,655620 ,656000 ,656380 ,656760 ,657140 ,657520 ,657900 ,658280 ,658660 ,659040 ,659420 ,659800 ,660180 ,660560 ,660940 ,661320 ,661700 ,662080 ,662460 ,662840 ,663220 ,663600 ,663980 ,664360 ,664740 ,665120 ,665500 ,665880 ,666260 ,666640 ,667020 ,667400 ,667780 ,668160 ,668540 ,668920 ,669300 ,669680 ,670060 ,670440 ,670820 ,671200 ,671580 ,671960 ,672340 ,672720 ,673100 ,673480 ,673860 ,674240 ,674620 ,675000 ,675380 ,675760 ,676140 ,676520 ,676900 ,677280 ,677660 ,678040 ,678420 ,678800 ,679180 ,679560 ,679940 ,680320 ,680700 ,681080 ,681460 ,681840 ,682220 ,682600 ,682980 ,683360 ,683740 ,684120 ,684500 ,684880 ,685260 ,685640 ,686020 ,686400 ,686780 ,687160 ,687540 ,687920 ,688300 ,688680 ,689060 ,689440 ,689820 ,690200 ,690580 ,690960 ,691340 ,691720 ,692100 ,692480 ,692860 ,693240 ,693620 ,694000 ,694380 ,694760 ,695140 ,695520 ,695900 ,696280 ,696660 ,697040 ,697420 ,697800 ,698180 ,698560 ,698940 ,699320 ,699700 ,700080 ,700460 ,700840 ,701220 ,701600 ,701980 ,702360 ,702740 ,703120 ,703500 ,703880 ,704260 ,704640 ,705020 ,705400 ,705780 ,706160 ,706540 ,706920 ,707300 ,707680 ,708060 ,708440 ,708820 ,709200 ,709580 ,709960 ,710340 ,710720 ,711100 ,711480 ,711860 ,712240 ,712620 ,713000 ,713380 ,713760 ,714140 ,714520 ,714900 ,715280 ,715660 ,716040 ,716420 ,716800 ,717180 ,717560 ,717940 ,718320 ,718700 ,719080 ,719460 ,719840 ,720220 ,720600 ,720980 ,721360 ,721740 ,722120 ,722500 ,722880 ,723260 ,723640 ,724020 ,724400 ,724780 ,725160 ,725540 ,725920 ,726300 ,726680 ,727060 ,727440 ,727820 ,728200 ,728580 ,728960 ,729340 ,729720 ,730100 ,730480 ,730860 ,731240 ,731620 ,732000 ,732380 ,732760 ,733140 ,733520 ,733900 ,734280 ,734660 ,735040 ,735420 ,735800 ,736180 ,736560 ,736940 ,737320 ,737700 ,738080 ,738460 ,738840 ,739220 ,739600 ,739980 ,740360 ,740740 ,741120 ,741500 ,741880 ,742260 ,742640 ,743020 ,743400 ,743780 ,744160 ,744540 ,744920 ,745300 ,745680 ,746060 ,746440 ,746820 ,747200 ,747580 ,747960 ,748340 ,748720 ,749100 ,749480 ,749860 ,750240 ,750620 ,751000 ,751380 ,751760 ,752140 ,752520 ,752900 ,753280 ,753660 ,754040 ,754420 ,754800 ,755180 ,755560 ,755940 ,756320 ,756700 ,757080 ,757460 ,757840 ,758220 ,758600 ,758980 ,759360 ,759740 ,760120 ,760500 ,760880 ,761260 ,761640 ,762020 ,762400 ,762780 ,763160 ,763540 ,763920 ,764300 ,764680 ,765060 ,765440 ,765820 ,766200 ,766580 ,766960 ,767340 ,767720 ,768100 ,768480 ,768860 ,769240 ,769620 ,770000 ,770380 ,770760 ,771140 ,771520 ,771900 ,772280 ,772660 ,773040 ,773420 ,773800 ,774180 ,774560 ,774940 ,775320 ,775700 ,776080 ,776460 ,776840 ,777220 ,777600 ,777980 ,778360 ,778740 ,779120 ,779500 ,779880 ,780260 ,780640 ,781020 ,781400 ,781780 ,782160 ,782540 ,782920 ,783300 ,783680 ,784060 ,784440 ,784820 ,785200 ,785580 ,785960 ,786340 ,786720 ,787100 ,787480 ,787860 ,788240 ,788620 ,789000 ,789380 ,789760 ,790140 ,790520 ,790900 ,791280 ,791660 ,792040 ,792420 ,792800 ,793180 ,793560 ,793940 ,794320 ,794700 ,795080 ,795460 ,795840 ,796220 ,796600 ,796980 ,797360 ,797740 ,798120 ,798500 ,798880 ,799260 ,799640 ,800020 ,800400 ,800780 ,801160 ,801540 ,801920 ,802300 ,802680 ,803060 ,803440 ,803820 ,804200 ,804580 ,804960 ,805340 ,805720 ,806100 ,806480 ,806860 ,807240 ,807620 ,808000 ,808380 ,808760 ,809140 ,809520 ,809900 ,810280 ,810660 ,811040 ,811420 ,811800 ,812180 ,812560 ,812940 ,813320 ,813700 ,814080 ,814460 ,814840 ,815220 ,815600 ,815980 ,816360 ,816740 ,817120 ,817500 ,817880 ,818260 ,818640 ,819020 ,819400 ,819780 ,820160 ,820540 ,820920 ,821300 ,821680 ,822060 ,822440 ,822820 ,823200 ,823580 ,823960 ,824340 ,824720 ,825100 ,825480 ,825860 ,826240 ,826620 ,827000 ,827380 ,827760 ,828140 ,828520 ,828900 ,829280 ,829660 ,830040 ,830420 ,830800 ,831180 ,831560 ,831940 ,832320 ,832700 ,833080 ,833460 ,833840 ,834220 ,834600 ,834980 ,835360 ,835740 ,836120 ,836500 ,836880 ,837260 ,837640 ,838020 ,838400 ,838780 ,839160 ,839540 ,839920 ,840300 ,840680 ,841060 ,841440 ,841820 ,842200 ,842580 ,842960 ,843340 ,843720 ,844100 ,844480 ,844860 ,845240 ,845620 ,846000 ,846380 ,846760 ,847140 ,847520 ,847900 ,848280 ,848660 ,849040 ,849420 ,849800 ,850180 ,850560 ,850940 ,851320 ,851700 ,852080 ,852460 ,852840 ,853220 ,853600 ,853980 ,854360 ,854740 ,855120 ,855500 ,855880 ,856260 ,856640 ,857020 ,857400 ,857780 ,858160 ,858540 ,858920 ,859300 ,859680 }));
	EXPECT_EQ(stones(24, 438, 714),  std::vector<int>({ 10074 ,10350 ,10626 ,10902 ,11178 ,11454 ,11730 ,12006 ,12282 ,12558 ,12834 ,13110 ,13386 ,13662 ,13938 ,14214 ,14490 ,14766 ,15042 ,15318 ,15594 ,15870 ,16146 ,16422 }));
	EXPECT_EQ(stones(40, 259, 982), std::vector<int>({ 10101 ,10824 ,11547 ,12270 ,12993 ,13716 ,14439 ,15162 ,15885 ,16608 ,17331 ,18054 ,18777 ,19500 ,20223 ,20946 ,21669 ,22392 ,23115 ,23838 ,24561 ,25284 ,26007 ,26730 ,27453 ,28176 ,28899 ,29622 ,30345 ,31068 ,31791 ,32514 ,33237 ,33960 ,34683 ,35406 ,36129 ,36852 ,37575 ,38298 }));
	EXPECT_EQ(stones(482, 605, 145), std::vector<int>({ 69745 ,70205 ,70665 ,71125 ,71585 ,72045 ,72505 ,72965 ,73425 ,73885 ,74345 ,74805 ,75265 ,75725 ,76185 ,76645 ,77105 ,77565 ,78025 ,78485 ,78945 ,79405 ,79865 ,80325 ,80785 ,81245 ,81705 ,82165 ,82625 ,83085 ,83545 ,84005 ,84465 ,84925 ,85385 ,85845 ,86305 ,86765 ,87225 ,87685 ,88145 ,88605 ,89065 ,89525 ,89985 ,90445 ,90905 ,91365 ,91825 ,92285 ,92745 ,93205 ,93665 ,94125 ,94585 ,95045 ,95505 ,95965 ,96425 ,96885 ,97345 ,97805 ,98265 ,98725 ,99185 ,99645 ,100105 ,100565 ,101025 ,101485 ,101945 ,102405 ,102865 ,103325 ,103785 ,104245 ,104705 ,105165 ,105625 ,106085 ,106545 ,107005 ,107465 ,107925, 108385 ,108845 ,109305 ,109765 ,110225 ,110685 ,111145 ,111605 ,112065 ,112525 ,112985 ,113445 ,113905 ,114365 ,114825 ,115285 ,115745 ,116205 ,116665 ,117125 ,117585 ,118045 ,118505 ,118965 ,119425 ,119885 ,120345 ,120805 ,121265 ,121725 ,122185 ,122645 ,123105 ,123565 ,124025 ,124485 ,124945 ,125405 ,125865 ,126325 ,126785 ,127245 ,127705 ,128165 ,128625 ,129085 ,129545 ,130005 ,130465 ,130925 ,131385 ,131845 ,132305 ,132765 ,133225 ,133685 ,134145 ,134605 ,135065 ,135525 ,135985 ,136445 ,136905 ,137365 ,137825 ,138285 ,138745 ,139205 ,139665 ,140125 ,140585 ,141045 ,141505 ,141965 ,142425 ,142885 ,143345 ,143805 ,144265 ,144725 ,145185 ,145645 ,146105 ,146565 ,147025 ,147485 ,147945 ,148405 ,148865 ,149325 ,149785 ,150245 ,150705 ,151165 ,151625 ,152085 ,152545 ,153005 ,153465 ,153925 ,154385 ,154845 ,155305 ,155765 ,156225 ,156685 ,157145 ,157605 ,158065 ,158525 ,158985 ,159445 ,159905 ,160365 ,160825 ,161285 ,161745 ,162205 ,162665 ,163125 ,163585 ,164045 ,164505 ,164965 ,165425 ,165885 ,166345 ,166805 ,167265 ,167725 ,168185 ,168645 ,169105 ,169565 ,170025 ,170485 ,170945 ,171405 ,171865 ,172325 ,172785 ,173245 ,173705 ,174165 ,174625 ,175085 ,175545 ,176005 ,176465 ,176925 ,177385 ,177845 ,178305 ,178765 ,179225 ,179685 ,180145 ,180605 ,181065 ,181525 ,181985 ,182445 ,182905 ,183365 ,183825 ,184285 ,184745 ,185205 ,185665 ,186125 ,186585 ,187045 ,187505 ,187965 ,188425 ,188885 ,189345 ,189805 ,190265 ,190725 ,191185 ,191645 ,192105 ,192565 ,193025 ,193485 ,193945 ,194405 ,194865 ,195325 ,195785 ,196245 ,196705 ,197165 ,197625 ,198085 ,198545 ,199005 ,199465 ,199925 ,200385 ,200845 ,201305 ,201765 ,202225 ,202685 ,203145 ,203605 ,204065 ,204525 ,204985 ,205445 ,205905 ,206365 ,206825 ,207285 ,207745 ,208205 ,208665 ,209125 ,209585 ,210045 ,210505 ,210965 ,211425 ,211885 ,212345 ,212805 ,213265 ,213725 ,214185 ,214645 ,215105 ,215565 ,216025 ,216485 ,216945 ,217405 ,217865 ,218325 ,218785 ,219245 ,219705 ,220165 ,220625 ,221085 ,221545 ,222005 ,222465 ,222925 ,223385 ,223845 ,224305 ,224765 ,225225 ,225685 ,226145 ,226605 ,227065 ,227525 ,227985 ,228445 ,228905 ,229365 ,229825 ,230285 ,230745 ,231205 ,231665 ,232125 ,232585 ,233045 ,233505 ,233965 ,234425 ,234885 ,235345 ,235805 ,236265 ,236725 ,237185 ,237645 ,238105 ,238565 ,239025 ,239485 ,239945 ,240405 ,240865 ,241325 ,241785 ,242245 ,242705 ,243165 ,243625 ,244085 ,244545 ,245005 ,245465 ,245925 ,246385 ,246845 ,247305 ,247765 ,248225 ,248685 ,249145 ,249605 ,250065 ,250525 ,250985 ,251445 ,251905 ,252365 ,252825 ,253285 ,253745 ,254205 ,254665 ,255125 ,255585 ,256045 ,256505 ,256965 ,257425 ,257885 ,258345 ,258805 ,259265 ,259725 ,260185 ,260645 ,261105 ,261565 ,262025 ,262485 ,262945 ,263405 ,263865 ,264325 ,264785 ,265245 ,265705 ,266165 ,266625 ,267085 ,267545 ,268005 ,268465 ,268925 ,269385 ,269845 ,270305 ,270765 ,271225 ,271685 ,272145 ,272605 ,273065 ,273525 ,273985 ,274445 ,274905 ,275365 ,275825 ,276285 ,276745 ,277205 ,277665 ,278125 ,278585 ,279045 ,279505 ,279965 ,280425 ,280885 ,281345 ,281805 ,282265 ,282725 ,283185 ,283645 ,284105 ,284565 ,285025 ,285485 ,285945 ,286405 ,286865 ,287325 ,287785 ,288245 ,288705 ,289165 ,289625 ,290085 ,290545 ,291005 }));
	EXPECT_EQ(stones(106, 591, 389), std::vector<int>({ 40845 ,41047 ,41249 ,41451 ,41653 ,41855 ,42057 ,42259 ,42461 ,42663 ,42865 ,43067 ,43269 ,43471 ,43673 ,43875 ,44077 ,44279 ,44481 ,44683 ,44885 ,45087 ,45289 ,45491 ,45693 ,45895 ,46097 ,46299 ,46501 ,46703 ,46905 ,47107 ,47309 ,47511 ,47713 ,47915 ,48117 ,48319 ,48521 ,48723 ,48925 ,49127 ,49329 ,49531 ,49733 ,49935 ,50137 ,50339 ,50541 ,50743 ,50945 ,51147 ,51349 ,51551 ,51753 ,51955 ,52157 ,52359 ,52561 ,52763 ,52965 ,53167 ,53369 ,53571 ,53773 ,53975 ,54177 ,54379 ,54581 ,54783 ,54985 ,55187 ,55389 ,55591 ,55793 ,55995 ,56197 ,56399 ,56601 ,56803 ,57005 ,57207 ,57409 ,57611 ,57813 ,58015 ,58217 ,58419 ,58621 ,58823 ,59025 ,59227 ,59429 ,59631 ,59833 ,60035 ,60237 ,60439 ,60641 ,60843 ,61045 ,61247 ,61449 ,61651 ,61853 ,62055 }));
	EXPECT_EQ(stones(118, 906, 790), std::vector<int>({ 92430 ,92546 ,92662 ,92778 ,92894 ,93010 ,93126 ,93242 ,93358 ,93474 ,93590 ,93706 ,93822 ,93938 ,94054 ,94170 ,94286 ,94402 ,94518 ,94634 ,94750 ,94866 ,94982 ,95098 ,95214 ,95330 ,95446 ,95562 ,95678 ,95794 ,95910 ,96026 ,96142 ,96258 ,96374 ,96490 ,96606 ,96722 ,96838 ,96954 ,97070 ,97186 ,97302 ,97418 ,97534 ,97650 ,97766 ,97882 ,97998 ,98114 ,98230 ,98346 ,98462 ,98578 ,98694 ,98810 ,98926 ,99042 ,99158 ,99274 ,99390 ,99506 ,99622 ,99738 ,99854 ,99970 ,100086 ,100202 ,100318 ,100434 ,100550 ,100666 ,100782 ,100898 ,101014 ,101130 ,101246 ,101362 ,101478 ,101594 ,101710 ,101826 ,101942 ,102058 ,102174 ,102290 ,102406 ,102522 ,102638 ,102754 ,102870 ,102986 ,103102 ,103218 ,103334 ,103450 ,103566 ,103682 ,103798 ,103914 ,104030 ,104146 ,104262 ,104378 ,104494 ,104610 ,104726 ,104842 ,104958 ,105074 ,105190 ,105306 ,105422 ,105538 ,105654 ,105770 ,105886 ,106002 }));
	EXPECT_EQ(stones(203, 283, 335), std::vector<int>({ 57166 ,57218 ,57270 ,57322 ,57374 ,57426 ,57478 ,57530 ,57582 ,57634 ,57686 ,57738 ,57790 ,57842 ,57894 ,57946 ,57998 ,58050 ,58102 ,58154 ,58206 ,58258 ,58310 ,58362 ,58414 ,58466 ,58518 ,58570 ,58622 ,58674 ,58726 ,58778 ,58830 ,58882 ,58934 ,58986 ,59038 ,59090 ,59142 ,59194 ,59246 ,59298 ,59350 ,59402 ,59454 ,59506 ,59558 ,59610 ,59662 ,59714 ,59766 ,59818 ,59870 ,59922 ,59974 ,60026 ,60078 ,60130 ,60182 ,60234 ,60286 ,60338 ,60390 ,60442 ,60494 ,60546 ,60598 ,60650 ,60702 ,60754 ,60806 ,60858 ,60910 ,60962 ,61014 ,61066 ,61118 ,61170 ,61222 ,61274 ,61326 ,61378 ,61430 ,61482 ,61534 ,61586 ,61638 ,61690 ,61742 ,61794 ,61846 ,61898 ,61950 ,62002 ,62054 ,62106 ,62158 ,62210 ,62262 ,62314 ,62366 ,62418 ,62470 ,62522 ,62574 ,62626 ,62678 ,62730 ,62782 ,62834 ,62886 ,62938 ,62990 ,63042 ,63094 ,63146 ,63198 ,63250 ,63302 ,63354 ,63406 ,63458 ,63510 ,63562 ,63614 ,63666 ,63718 ,63770 ,63822 ,63874 ,63926 ,63978 ,64030 ,64082 ,64134 ,64186 ,64238 ,64290 ,64342 ,64394 ,64446 ,64498 ,64550 ,64602 ,64654 ,64706 ,64758 ,64810 ,64862 ,64914 ,64966 ,65018 ,65070 ,65122 ,65174 ,65226 ,65278 ,65330 ,65382 ,65434 ,65486 ,65538 ,65590 ,65642 ,65694 ,65746 ,65798 ,65850 ,65902 ,65954 ,66006 ,66058 ,66110 ,66162 ,66214 ,66266 ,66318 ,66370 ,66422 ,66474 ,66526 ,66578 ,66630 ,66682 ,66734 ,66786 ,66838 ,66890 ,66942 ,66994 ,67046 ,67098 ,67150 ,67202 ,67254 ,67306 ,67358 ,67410 ,67462 ,67514 ,67566 ,67618 ,67670 }));
	EXPECT_EQ(stones(243, 856, 564), std::vector<int>({ 136488 ,136780 ,137072 ,137364 ,137656 ,137948 ,138240 ,138532 ,138824 ,139116 ,139408 ,139700 ,139992 ,140284 ,140576 ,140868 ,141160 ,141452 ,141744 ,142036 ,142328 ,142620 ,142912 ,143204 ,143496 ,143788 ,144080 ,144372 ,144664 ,144956 ,145248 ,145540 ,145832 ,146124 ,146416 ,146708 ,147000 ,147292 ,147584 ,147876 ,148168 ,148460 ,148752 ,149044 ,149336 ,149628 ,149920 ,150212 ,150504 ,150796 ,151088 ,151380 ,151672 ,151964 ,152256 ,152548 ,152840 ,153132 ,153424 ,153716 ,154008 ,154300 ,154592 ,154884 ,155176 ,155468 ,155760 ,156052 ,156344 ,156636 ,156928 ,157220 ,157512 ,157804 ,158096 ,158388 ,158680 ,158972 ,159264 ,159556 ,159848 ,160140 ,160432 ,160724 ,161016 ,161308 ,161600 ,161892 ,162184 ,162476 ,162768 ,163060 ,163352 ,163644 ,163936 ,164228 ,164520 ,164812 ,165104 ,165396 ,165688 ,165980 ,166272 ,166564 ,166856 ,167148 ,167440 ,167732 ,168024 ,168316 ,168608 ,168900 ,169192 ,169484 ,169776 ,170068 ,170360 ,170652 ,170944 ,171236 ,171528 ,171820 ,172112 ,172404 ,172696 ,172988 ,173280 ,173572 ,173864 ,174156 ,174448 ,174740 ,175032 ,175324 ,175616 ,175908 ,176200 ,176492 ,176784 ,177076 ,177368 ,177660 ,177952 ,178244 ,178536 ,178828 ,179120 ,179412 ,179704 ,179996 ,180288 ,180580 ,180872 ,181164 ,181456 ,181748 ,182040 ,182332 ,182624 ,182916 ,183208 ,183500 ,183792 ,184084 ,184376 ,184668 ,184960 ,185252 ,185544 ,185836 ,186128 ,186420 ,186712 ,187004 ,187296 ,187588 ,187880 ,188172 ,188464 ,188756 ,189048 ,189340 ,189632 ,189924 ,190216 ,190508 ,190800 ,191092 ,191384 ,191676 ,191968 ,192260 ,192552 ,192844 ,193136 ,193428 ,193720 ,194012 ,194304 ,194596 ,194888 ,195180 ,195472 ,195764 ,196056 ,196348 ,196640 ,196932 ,197224 ,197516 ,197808 ,198100 ,198392 ,198684 ,198976 ,199268 ,199560 ,199852 ,200144 ,200436 ,200728 ,201020 ,201312 ,201604 ,201896 ,202188 ,202480 ,202772 ,203064 ,203356 ,203648 ,203940 ,204232 ,204524 ,204816 ,205108 ,205400 ,205692 ,205984 ,206276 ,206568 ,206860 ,207152 }));
}

TEST(stones, case_11)
{
	EXPECT_EQ(stones(2, 1, 1), std::vector<int>({ 1 }));
	EXPECT_EQ(stones(100, 1, 1), std::vector<int>({ 99 }));
	EXPECT_EQ(stones(999, 1, 2), std::vector<int>({}));
}

TEST(stones, case_12)
{
	EXPECT_EQ(stones(7, 9, 11), std::vector<int>({ 54, 56, 58, 60, 62, 64, 66 }));
	EXPECT_EQ(stones(4, 8, 16), std::vector<int>({ 24, 32, 40, 48 }));
}